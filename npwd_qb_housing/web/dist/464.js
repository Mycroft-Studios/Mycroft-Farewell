"use strict";(self.webpackChunknpwd_qb_housing=self.webpackChunknpwd_qb_housing||[]).push([[464],{4274:(n,e,o)=>{o.d(e,{Gy:()=>i,cX:()=>a});var t=o(7095),r=o(6115),i=t.Z[500],a=r.Z.white;t.Z[900],t.Z[500],t.Z[500],t.Z[900],t.Z[500]},9464:(n,e,o)=>{o.r(e);var t,r,i=o(2950),a=o.n(i),p=o(2181),d=o.n(p),u=(o(5475),o(3839)),l=o.n(u),c=(o(4810),o(1807),o(5137),o(1551),o(4714),o(602),o(9275),o(6235),o(4362),o(4582),o(653),o(352),function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n});l().div(t||(t=c(["\n  flex: 1;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],["\n  flex: 1;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"])),(function(n){return n.isDarkMode&&"\n    background-color: #121212;\n  "})),l().footer(r||(r=c(["\n  margin-top: auto;\n"],["\n  margin-top: auto;\n"]))),o(4274),o.p,o(5142);var x,b,s,f=o(2347),g=function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n};l().div(x||(x=g(["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"],["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"]))),l().div(b||(b=g(["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"],["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"])),(function(n){return n.src})),l().div(s||(s=g(["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"],["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"]))),(0,f.Z)({palette:{mode:"light"}}),d().render(a().createElement((function(){return null}),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,